===========================================================================================
===========================================================================================
Multiplexor with Enable:
===========================================================================================
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity code is
	Port( iaSel : in STD_LOGIC_VECTOR (2 downto 0);
			iaData: in STD_LOGIC_VECTOR (7 downto 0);
			iEnable: in STD_LOGIC;
			oY: out STD_LOGIC);
end code;



architecture Behavioral of code is

begin
	
	oY <= iaData(0) when iaSel = 0 and iEnable = '1' else
		iaData(1) when iaSel = 1 and iEnable = '1' else
		iaData(2) when iaSel = 2 and iEnable = '1' else
		iaData(3) when iaSel = 3 and iEnable = '1' else
		iaData(4) when iaSel = 4 and iEnable = '1' else
		iaData(5) when iaSel = 5 and iEnable = '1' else
		iaData(6) when iaSel = 6 and iEnable = '1' else
		iaData(7) when iaSel = 7 and iEnable = '1' else
		'Z';

end Behavioral;

===========================================================================================
===========================================================================================
Multiplexor with enable and separator
===========================================================================================
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity code is
	Port( iaSel : in STD_LOGIC_VECTOR (2 downto 0);
			iaData: in STD_LOGIC_VECTOR (7 downto 0);
			iEnable: in STD_LOGIC;
			oY: out STD_LOGIC);
end code;



architecture Behavioral of code is

	signal sY: STD_LOGIC;

begin
	with iaSel select
	sY <= iaData(0)when "000" ,
			iaData(1)when "001" ,
			iaData(2)when "010" ,
			iaData(3)when "011" ,
			iaData(4)when "100" ,
			iaData(5)when "101" ,
			iaData(6)when "110" ,
			iaData(7)when "111" ,
			'0' when others;
	oY <= sY when iEnable='1' else 'Z';
			
end Behavioral;
===========================================================================================
===========================================================================================
RECUNOSCATOR FRECVENTA DINAMIC 010101 = 1 Model Mealy else 0 
===========================================================================================

----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity code is
	Port( iClk : in STD_LOGIC;
	      iD :  in STD_LOGIC;
	      iINITL: in STD_LOGIC;
	      oRecunoscut : out STD_LOGIC);
end code;

architecture Behavioral of code is
	signal saStare_prezenta, saStare_urmatoare : STD_LOGIC_VECTOR(2 downto 0);
begin
	saStare_urmatoare <= "001" when (saStare_prezenta = "000" and iD = '0') else
			     "000" when (saStare_prezenta = "000" and iD = '1') else
			     "001" when (saStare_prezenta = "001" and iD = '0') else
			     "010" when (saStare_prezenta = "001" and iD = '1') else
			     "011" when (saStare_prezenta = "010" and iD = '0') else
			     "000" when (saStare_prezenta = "010" and iD = '1') else
			     "001" when (saStare_prezenta = "011" and iD = '0') else
			     "100" when (saStare_prezenta = "011" and iD = '1') else
			     "101" when (saStare_prezenta = "100" and iD = '0') else
			     "000" when (saStare_prezenta = "100" and iD = '1') else
			     "001" when (saStare_prezenta = "101" and iD = '0') else
			     "100" when (saStare_prezenta = "101" and iD = '1') else
			     "000";
	saStare_prezenta <= "000" when (iINITL = '0')else
			    saStare_urmatoare when (rising_edge(iClk));
	oRecunoscut <= '1' when (saStare_prezenta = "101" and iD = '1')else
		       '0';
			
end Behavioral;
===========================================================================================
===========================================================================================
RECUNOSCATOR FRECVENTA DINAMIC 010101 = 1 Model MOORE else 0 
===========================================================================================

----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity code is
	Port( iClk : in STD_LOGIC;
	      iD :  in STD_LOGIC;
	      iINITL: in STD_LOGIC;
	      oRecunoscut : out STD_LOGIC);
end code;

architecture Behavioral of code is
	signal saStare_prezenta, saStare_urmatoare : STD_LOGIC_VECTOR(2 downto 0);
begin
	saStare_urmatoare <= "001" when (saStare_prezenta = "000" and iD = '0') else
			     "000" when (saStare_prezenta = "000" and iD = '1') else
			     "001" when (saStare_prezenta = "001" and iD = '0') else
			     "010" when (saStare_prezenta = "001" and iD = '1') else
			     "011" when (saStare_prezenta = "010" and iD = '0') else
			     "000" when (saStare_prezenta = "010" and iD = '1') else
			     "001" when (saStare_prezenta = "011" and iD = '0') else
			     "100" when (saStare_prezenta = "011" and iD = '1') else
			     "101" when (saStare_prezenta = "100" and iD = '0') else
			     "000" when (saStare_prezenta = "100" and iD = '1') else
			     "001" when (saStare_prezenta = "101" and iD = '0') else
			     "110" when (saStare_prezenta = "101" and iD = '1') else
			     "101" when (saStare_prezenta = "110" and iD = '0') else
			     "000" when (saStare_prezenta = "110" and iD = '1') else
			     "000";
	saStare_prezenta <= "000" when (iINITL = '0')else
			    saStare_urmatoare when (rising_edge(iClk));
	oRecunoscut <= '1' when (saStare_prezenta = "110")else
		       '0';
			
end Behavioral;
===========================================================================================
DIVIZOR DE FRECVENTA MODULO 20
===========================================================================================
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity code is
	Port( iClk : in STD_LOGIC;
	      iReset : in STD_LOGIC;
	      oY : out STD_LOGIC);
end code;

architecture Behavioral of code is
	signal saQ, saY : STD_LOGIC_VECTOR(4 downto 0);
begin
	saY <= "01100" when saQ = "11111" else
		saQ+1;
	saQ <= "01100" when iReset = '1' else
		saY when rising_edge(iClk);
	oY <= '1' when saQ = "11111" else '0';
end Behavioral;


