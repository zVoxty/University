#include <iostream>
#include <mutex>
#include <condition_variable>
#include <thread>
#include <queue>
#include <Windows.h>
#include <stdio.h>

using namespace std;

std::queue<int> myqu;
std::mutex queueMutex;
int a = 1;
int loops = 200;

class Semaphore {
public:
	Semaphore(int count_ = 0)
		: count(count_) {}

	inline void up()
	{
		std::unique_lock<std::mutex> lock(mtx);
		count++;
		cv.notify_one();
	}

	inline void down()
	{
		std::unique_lock<std::mutex> lock(mtx);

		while (count == 0) {
			cv.wait(lock);
		}
		count--;
	}

private:
	std::mutex mtx;
	std::condition_variable cv;
	int count;
};

Semaphore semFree(5);
Semaphore semFull(5);

void pushQueue(int& data) {
	semFree.down();

	std::lock_guard<std::mutex> guard(queueMutex);
	{
		myqu.push(data);
		cout << "Produced " << data;
	}

	semFull.up();
}

void prod() {

	int produced = NULL;

	while (loops--) {
		if (produced == NULL)
			produced = a++;

		if (myqu.size() < 10) {
			pushQueue(produced);
			produced = NULL;
		} 
	}
}

void cons() {
	int x = 0;
	while (true) {
		semFull.down();

		std::lock_guard<std::mutex> guard(queueMutex);
		{
			if (myqu.empty())
				continue;

			x = myqu.front();
			myqu.pop();		
		}

		semFree.up();
		cout << "Consumed " << x << endl;
	}
}

int main() {

	srand(time(NULL));
	std::queue<int> queue;

	thread producer(prod);
	thread consumer(cons);

	producer.join();
	consumer.join();

	return 0;

}
